// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e2Wrjg6Dz94BkfogsCYoEo
// Component: YQCYqHksciRi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: l9zB0gKjLGnY/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import BlogCardRightLarge from "../../BlogCardRightLarge"; // plasmic-import: GqL2vzWXD3Cj/component
import BlogCardLeft from "../../BlogCardLeft"; // plasmic-import: Ueq-CzAs1AdM/component
import BlogCardLeftNoImage from "../../BlogCardLeftNoImage"; // plasmic-import: YqfggvVEPrlZ/component
import BlogCard from "../../BlogCard"; // plasmic-import: kH8bUv2Ub609/component
import BlogCardLarge from "../../BlogCardLarge"; // plasmic-import: Cv5byG579BNA/component
import CallToActionSection from "../../CallToActionSection"; // plasmic-import: JbYIy_ldO41D/component
import Button from "../../Button"; // plasmic-import: dBCQUhJCSZs2/component
import FooterSection from "../../FooterSection"; // plasmic-import: 7rGOkW3yxftm/component

import { useScreenVariants as useScreenVariantseatfCtt4BrEn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eatfCTT4BrEN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: e2Wrjg6Dz94BkfogsCYoEo/projectcss
import sty from "./PlasmicHomepage4.module.css"; // plasmic-import: YQCYqHksciRi/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: 563f33iyx-K3/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: HEPvTyIN4GhK/icon

createPlasmicElementProxy;

export type PlasmicHomepage4__VariantMembers = {};
export type PlasmicHomepage4__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage4__VariantsArgs;
export const PlasmicHomepage4__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage4__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage4__ArgsType;
export const PlasmicHomepage4__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage4__OverridesType = {
  root?: Flex__<"div">;
  blogCardRightLarge?: Flex__<typeof BlogCardRightLarge>;
  blogCard?: Flex__<typeof BlogCard>;
  blogCardLarge?: Flex__<typeof BlogCardLarge>;
  callToActionSection?: Flex__<typeof CallToActionSection>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepage4Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage4__RenderFunc(props: {
  variants: PlasmicHomepage4__VariantsArgs;
  args: PlasmicHomepage4__ArgsType;
  overrides: PlasmicHomepage4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "youtube",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "no"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseatfCtt4BrEn()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage4.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage4.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage4.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__cXn7F)}>
            <Navbar
              className={classNames("__wab_instance", sty.navbar___4E9J2)}
              colors={"dark"}
            />

            <Navbar
              className={classNames("__wab_instance", sty.navbar__tegX)}
              colors={"dark"}
              newsCategory={true}
            />
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eDfPy)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kMjYd)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dv0F)} />

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__cqBay
                )}
              >
                {"Featured"}
              </h3>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ffg86)}
            >
              <CmsQueryRepeater
                className={classNames(
                  "__wab_instance",
                  sty.cmsDataFetcher__ihVM
                )}
                desc={false}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__raG5Z
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                        <BlogCardLeft
                          className={classNames(
                            "__wab_instance",
                            sty.blogCardLeft__g7TDd
                          )}
                        />
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                }
                forceEmptyState={false}
                forceLoadingState={false}
                limit={1}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fcQ
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                noAutoRepeat={false}
                noLayout={false}
                table={"posts"}
                useDraft={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hoD3W)}
                    >
                      <BlogCardRightLarge
                        data-plasmic-name={"blogCardRightLarge"}
                        data-plasmic-override={overrides.blogCardRightLarge}
                        className={classNames(
                          "__wab_instance",
                          sty.blogCardRightLarge
                        )}
                      />
                    </Stack__>
                  )}
                </DataCtxReader__>
              </CmsQueryRepeater>
              <CmsQueryRepeater
                className={classNames(
                  "__wab_instance",
                  sty.cmsDataFetcher___2K459
                )}
                desc={false}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Qm2D
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                        <BlogCardLeft
                          className={classNames(
                            "__wab_instance",
                            sty.blogCardLeft__pAzfe
                          )}
                        />
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                }
                forceEmptyState={false}
                forceLoadingState={false}
                limit={2}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bBLol
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                noAutoRepeat={false}
                noLayout={false}
                table={"posts"}
                useDraft={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ziFgu)}
                    >
                      <BlogCardLeftNoImage
                        className={classNames(
                          "__wab_instance",
                          sty.blogCardLeftNoImage__kFu58
                        )}
                      />
                    </Stack__>
                  )}
                </DataCtxReader__>
              </CmsQueryRepeater>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iOxrS)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xjfol)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___8FwOv)}
              />

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__fOqay
                )}
              >
                {"Featured"}
              </h3>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vUfMl)}
            >
              <CmsQueryRepeater
                className={classNames(
                  "__wab_instance",
                  sty.cmsDataFetcher___4RbFy
                )}
                desc={false}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___0XWy2
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                        <BlogCardLeft
                          className={classNames(
                            "__wab_instance",
                            sty.blogCardLeft___9J5M2
                          )}
                        />
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                }
                forceEmptyState={false}
                forceLoadingState={false}
                limit={5}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yj76B
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                noAutoRepeat={false}
                noLayout={false}
                table={"posts"}
                useDraft={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <BlogCard
                      data-plasmic-name={"blogCard"}
                      data-plasmic-override={overrides.blogCard}
                      className={classNames("__wab_instance", sty.blogCard)}
                    />
                  )}
                </DataCtxReader__>
              </CmsQueryRepeater>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bUaEj)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p9Iiu)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yAgn8)} />

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__ntLw7
                )}
              >
                {"Featured"}
              </h3>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yMaws)}
            >
              <BlogCardLarge
                data-plasmic-name={"blogCardLarge"}
                data-plasmic-override={overrides.blogCardLarge}
                children={null}
                className={classNames("__wab_instance", sty.blogCardLarge)}
              />

              <CmsQueryRepeater
                className={classNames(
                  "__wab_instance",
                  sty.cmsDataFetcher__k531G
                )}
                desc={false}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gYKrD
                          )}
                        >
                          {"No matching published entries found."}
                        </div>
                        <BlogCardLeft
                          className={classNames(
                            "__wab_instance",
                            sty.blogCardLeft__iAmcc
                          )}
                        />
                      </React.Fragment>
                    )}
                  </DataCtxReader__>
                }
                forceEmptyState={false}
                forceLoadingState={false}
                limit={3}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uT4A
                        )}
                      >
                        {"Loading..."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                noAutoRepeat={false}
                noLayout={false}
                table={"posts"}
                useDraft={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <BlogCardLeftNoImage
                      className={classNames(
                        "__wab_instance",
                        sty.blogCardLeftNoImage__v5YG
                      )}
                      title={
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.plasmicCmsPostsItem.data.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Card title";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      }
                    />
                  )}
                </DataCtxReader__>
              </CmsQueryRepeater>
            </Stack__>
          </Stack__>
          <CallToActionSection
            data-plasmic-name={"callToActionSection"}
            data-plasmic-override={overrides.callToActionSection}
            className={classNames("__wab_instance", sty.callToActionSection)}
            image={{
              src: "/plasmic/daply_landing/images/meeting.jpg",
              fullWidth: 2916,
              fullHeight: 1787,
              aspectRatio: undefined
            }}
          />

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
            dark={true}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__obg8D
            )}
          >
            {"Here's how 3 entreprenuers made it in America"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "blogCardRightLarge",
    "blogCard",
    "blogCardLarge",
    "callToActionSection",
    "footerSection"
  ],

  blogCardRightLarge: ["blogCardRightLarge"],
  blogCard: ["blogCard"],
  blogCardLarge: ["blogCardLarge"],
  callToActionSection: ["callToActionSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  blogCardRightLarge: typeof BlogCardRightLarge;
  blogCard: typeof BlogCard;
  blogCardLarge: typeof BlogCardLarge;
  callToActionSection: typeof CallToActionSection;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage4__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage4__VariantsArgs;
    args?: PlasmicHomepage4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage4__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage4__ArgProps,
          internalVariantPropNames: PlasmicHomepage4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage4";
  } else {
    func.displayName = `PlasmicHomepage4.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage4 = Object.assign(
  // Top-level PlasmicHomepage4 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    blogCardRightLarge: makeNodeComponent("blogCardRightLarge"),
    blogCard: makeNodeComponent("blogCard"),
    blogCardLarge: makeNodeComponent("blogCardLarge"),
    callToActionSection: makeNodeComponent("callToActionSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage4
    internalVariantProps: PlasmicHomepage4__VariantProps,
    internalArgProps: PlasmicHomepage4__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Daply News",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage4;
/* prettier-ignore-end */
