// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e2Wrjg6Dz94BkfogsCYoEo
// Component: 7rGOkW3yxftm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: FJeM-IovKNGT/component
import Button from "../../Button"; // plasmic-import: dBCQUhJCSZs2/component

import { useScreenVariants as useScreenVariantseatfCtt4BrEn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eatfCTT4BrEN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: e2Wrjg6Dz94BkfogsCYoEo/projectcss
import sty from "./PlasmicFooterSection.module.css"; // plasmic-import: 7rGOkW3yxftm/css

import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: Fr9w_t3vff8j/icon
import GithubIcon from "./icons/PlasmicIcon__Github"; // plasmic-import: NGD2lMyxrrwg/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: kTg_jwhAEaPE/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: 563f33iyx-K3/icon

createPlasmicElementProxy;

export type PlasmicFooterSection__VariantMembers = {
  dark: "dark";
  mobileDarkk: "mobileDarkk";
};
export type PlasmicFooterSection__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
  mobileDarkk?: SingleBooleanChoiceArg<"mobileDarkk">;
};
type VariantPropType = keyof PlasmicFooterSection__VariantsArgs;
export const PlasmicFooterSection__VariantProps = new Array<VariantPropType>(
  "dark",
  "mobileDarkk"
);

export type PlasmicFooterSection__ArgsType = {};
type ArgPropType = keyof PlasmicFooterSection__ArgsType;
export const PlasmicFooterSection__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterSection__OverridesType = {
  root?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
};

export interface DefaultFooterSectionProps {
  dark?: SingleBooleanChoiceArg<"dark">;
  mobileDarkk?: SingleBooleanChoiceArg<"mobileDarkk">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooterSection__RenderFunc(props: {
  variants: PlasmicFooterSection__VariantsArgs;
  args: PlasmicFooterSection__ArgsType;
  overrides: PlasmicFooterSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dark
      },
      {
        path: "mobileDarkk",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobileDarkk
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseatfCtt4BrEn()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootdark]: hasVariant($state, "dark", "dark"),
          [sty.rootmobileDarkk]: hasVariant(
            $state,
            "mobileDarkk",
            "mobileDarkk"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__x1F8U, {
          [sty.freeBoxdark__x1F8Ui3Dm4]: hasVariant($state, "dark", "dark"),
          [sty.freeBoxmobileDarkk__x1F8UGnsB]: hasVariant(
            $state,
            "mobileDarkk",
            "mobileDarkk"
          )
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wZaEk, {
            [sty.freeBoxdark__wZaEki3Dm4]: hasVariant($state, "dark", "dark"),
            [sty.freeBoxmobileDarkk__wZaEkGnsB]: hasVariant(
              $state,
              "mobileDarkk",
              "mobileDarkk"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.freeBox__rcyl5)}>
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames("__wab_instance", sty.logo, {
                [sty.logodark]: hasVariant($state, "dark", "dark"),
                [sty.logomobileDarkk]: hasVariant(
                  $state,
                  "mobileDarkk",
                  "mobileDarkk"
                )
              })}
              white={
                hasVariant($state, "mobileDarkk", "mobileDarkk")
                  ? true
                  : hasVariant($state, "dark", "dark")
                  ? true
                  : undefined
              }
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ic7Ch,
                {
                  [sty.textdark__ic7CHi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__ic7ChGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Supercharge your content\u26a1"}
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lgrO)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4SC0H)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg___7VHaK, {
                  [sty.svgdark___7VHaKi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.svgmobileDarkk___7VHaKGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                })}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__ckxmT, {
                  [sty.svgdark__ckxmTi3Dm4]: hasVariant($state, "dark", "dark"),
                  [sty.svgmobileDarkk__ckxmTGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                })}
                role={"img"}
              />

              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__yTqJ, {
                  [sty.svgdark__yTqJI3Dm4]: hasVariant($state, "dark", "dark"),
                  [sty.svgmobileDarkk__yTqJGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                })}
                role={"img"}
              />
            </Stack__>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__v2Cs, {
            [sty.freeBoxmobileDarkk__v2CsGnsB]: hasVariant(
              $state,
              "mobileDarkk",
              "mobileDarkk"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dmqe,
              {
                [sty.textdark__dmqeI3Dm4]: hasVariant($state, "dark", "dark"),
                [sty.textmobileDarkk__dmqeGnsB]: hasVariant(
                  $state,
                  "mobileDarkk",
                  "mobileDarkk"
                )
              }
            )}
          >
            {"Product"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__xxlk5, {
              [sty.buttondark__xxlk5I3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__xxlk5GnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l8IQe,
                {
                  [sty.textdark__l8IQei3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__l8IQeGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Pricing"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__zsCvt, {
              [sty.buttondark__zsCvTi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__zsCvtGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wfYg,
                {
                  [sty.textdark__wfYGi3Dm4]: hasVariant($state, "dark", "dark"),
                  [sty.textmobileDarkk__wfYgGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Log in"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__uKuHw, {
              [sty.buttondark__uKuHwi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__uKuHwGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tXh1T,
                {
                  [sty.textdark__tXh1Ti3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__tXh1TGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Integrations"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__if4Om, {
              [sty.buttondark__if4OMi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__if4OmGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yzmNu,
                {
                  [sty.textdark__yzmNUi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__yzmNuGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Insights"}
            </div>
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pMpXh, {
            [sty.freeBoxdark__pMpXHi3Dm4]: hasVariant($state, "dark", "dark"),
            [sty.freeBoxmobileDarkk__pMpXhGnsB]: hasVariant(
              $state,
              "mobileDarkk",
              "mobileDarkk"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jDdMa,
              {
                [sty.textdark__jDdMai3Dm4]: hasVariant($state, "dark", "dark"),
                [sty.textmobileDarkk__jDdMaGnsB]: hasVariant(
                  $state,
                  "mobileDarkk",
                  "mobileDarkk"
                )
              }
            )}
          >
            {"Support"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__lwZAm, {
              [sty.buttondark__lwZAmi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__lwZAmGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hqrAk,
                {
                  [sty.textdark__hqrAki3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__hqrAkGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Documentation"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__k3X5Z, {
              [sty.buttondark__k3X5Zi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__k3X5ZGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g6GR,
                {
                  [sty.textdark__g6GRi3Dm4]: hasVariant($state, "dark", "dark"),
                  [sty.textmobileDarkk__g6GRGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"FAQs"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__yNnmp, {
              [sty.buttondark__yNnmPi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__yNnmpGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o9RQg,
                {
                  [sty.textdark__o9RQgi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__o9RQgGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Status"}
            </div>
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wPyvd, {
            [sty.freeBoxdark__wPyvDi3Dm4]: hasVariant($state, "dark", "dark"),
            [sty.freeBoxmobileDarkk__wPyvdGnsB]: hasVariant(
              $state,
              "mobileDarkk",
              "mobileDarkk"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__s14Wo,
              {
                [sty.textdark__s14WOi3Dm4]: hasVariant($state, "dark", "dark"),
                [sty.textmobileDarkk__s14WoGnsB]: hasVariant(
                  $state,
                  "mobileDarkk",
                  "mobileDarkk"
                )
              }
            )}
          >
            {"Company"}
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__ml6FT, {
              [sty.buttondark__ml6FTi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__ml6FTGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bEkmY,
                {
                  [sty.textdark__bEkmYi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__bEkmYGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"About"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__fjxzD, {
              [sty.buttondark__fjxzDi3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__fjxzDGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yRxpZ,
                {
                  [sty.textdark__yRxpZi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__yRxpZGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Contact us"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__q93N, {
              [sty.buttondark__q93Ni3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__q93NGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6WRsh,
                {
                  [sty.textdark___6WRshi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk___6WRshGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Careers"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__zZrK, {
              [sty.buttondark__zZrKI3Dm4]: hasVariant($state, "dark", "dark"),
              [sty.buttonmobileDarkk__zZrKGnsB]: hasVariant(
                $state,
                "mobileDarkk",
                "mobileDarkk"
              )
            })}
            color2={"navLink"}
            flat={true}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qbIqf,
                {
                  [sty.textdark__qbIqfi3Dm4]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  ),
                  [sty.textmobileDarkk__qbIqfGnsB]: hasVariant(
                    $state,
                    "mobileDarkk",
                    "mobileDarkk"
                  )
                }
              )}
            >
              {"Media"}
            </div>
          </Button>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSection__VariantsArgs;
    args?: PlasmicFooterSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooterSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooterSection__ArgProps,
          internalVariantPropNames: PlasmicFooterSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),

    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
