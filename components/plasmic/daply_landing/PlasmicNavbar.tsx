// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e2Wrjg6Dz94BkfogsCYoEo
// Component: l9zB0gKjLGnY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: FJeM-IovKNGT/component
import Button from "../../Button"; // plasmic-import: dBCQUhJCSZs2/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Link2 from "../../Link"; // plasmic-import: rJ4GUCSYNAYd/component

import { useScreenVariants as useScreenVariantseatfCtt4BrEn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eatfCTT4BrEN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: e2Wrjg6Dz94BkfogsCYoEo/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: l9zB0gKjLGnY/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: 563f33iyx-K3/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {
  colors: "dark" | "white";
  newsCategory: "newsCategory";
  scrolled: "scrolled";
};
export type PlasmicNavbar__VariantsArgs = {
  colors?: SingleChoiceArg<"dark" | "white">;
  newsCategory?: SingleBooleanChoiceArg<"newsCategory">;
  scrolled?: SingleBooleanChoiceArg<"scrolled">;
};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "colors",
  "newsCategory",
  "scrolled"
);

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: Flex__<"div">;
  logo?: Flex__<typeof Logo>;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
};

export interface DefaultNavbarProps {
  colors?: SingleChoiceArg<"dark" | "white">;
  newsCategory?: SingleBooleanChoiceArg<"newsCategory">;
  scrolled?: SingleBooleanChoiceArg<"scrolled">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "colors",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.colors
      },
      {
        path: "newsCategory",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.newsCategory
      },
      {
        path: "scrolled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.scrolled
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseatfCtt4BrEn()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolors_dark]: hasVariant($state, "colors", "dark"),
          [sty.rootcolors_white]: hasVariant($state, "colors", "white"),
          [sty.rootnewsCategory]: hasVariant(
            $state,
            "newsCategory",
            "newsCategory"
          ),
          [sty.rootscrolled]: hasVariant($state, "scrolled", "scrolled")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fiCx5, {
          [sty.freeBoxnewsCategory__fiCx529QK7]: hasVariant(
            $state,
            "newsCategory",
            "newsCategory"
          )
        })}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo, {
            [sty.logocolors_dark]: hasVariant($state, "colors", "dark"),
            [sty.logonewsCategory]: hasVariant(
              $state,
              "newsCategory",
              "newsCategory"
            )
          })}
          white={hasVariant($state, "colors", "dark") ? true : undefined}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fj6Sd)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__fsaBf, {
              [sty.buttoncolors_dark__fsaBfBpTZg]: hasVariant(
                $state,
                "colors",
                "dark"
              ),
              [sty.buttonnewsCategory__fsaBf29QK7]: hasVariant(
                $state,
                "newsCategory",
                "newsCategory"
              )
            })}
            color2={
              hasVariant($state, "newsCategory", "newsCategory")
                ? "whiteClear"
                : hasVariant($state, "colors", "dark")
                ? "whiteClear"
                : "navLink"
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xTazF
              )}
            >
              {"Contact"}
            </div>
          </Button>
        </Stack__>
        <CmsQueryRepeater
          data-plasmic-name={"cmsDataFetcher"}
          data-plasmic-override={overrides.cmsDataFetcher}
          className={classNames("__wab_instance", sty.cmsDataFetcher, {
            [sty.cmsDataFetchernewsCategory]: hasVariant(
              $state,
              "newsCategory",
              "newsCategory"
            )
          })}
          desc={false}
          emptyMessage={
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oqiso
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "No matching published entries found.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Link2
                    className={classNames("__wab_instance", sty.link__dVhlB, {
                      [sty.linknewsCategory__dVhlB29QK7]: hasVariant(
                        $state,
                        "newsCategory",
                        "newsCategory"
                      )
                    })}
                  />
                </React.Fragment>
              )}
            </DataCtxReader__>
          }
          forceEmptyState={false}
          forceLoadingState={false}
          limit={0}
          loadingMessage={
            <DataCtxReader__>
              {$ctx => (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f4QZa
                  )}
                >
                  {"Loading..."}
                </div>
              )}
            </DataCtxReader__>
          }
          noAutoRepeat={false}
          noLayout={false}
          table={"categories"}
          useDraft={false}
        >
          <DataCtxReader__>
            {$ctx => (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z4Eti)}
              >
                <CmsRowField
                  data-plasmic-name={"cmsEntryField"}
                  data-plasmic-override={overrides.cmsEntryField}
                  className={classNames("__wab_instance", sty.cmsEntryField, {
                    [sty.cmsEntryFieldnewsCategory]: hasVariant(
                      $state,
                      "newsCategory",
                      "newsCategory"
                    )
                  })}
                  themeResetClassName={classNames(
                    projectcss.root_reset,
                    projectcss.root_reset_tags,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                />

                <Link2
                  className={classNames("__wab_instance", sty.link__r7C5T, {
                    [sty.linknewsCategory__r7C5T29QK7]: hasVariant(
                      $state,
                      "newsCategory",
                      "newsCategory"
                    )
                  })}
                />
              </Stack__>
            )}
          </DataCtxReader__>
        </CmsQueryRepeater>
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox__e15B)}>
            <button
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button__lc6Hs
              )}
            >
              {"Sign up"}
            </button>
            <Button
              className={classNames("__wab_instance", sty.button__prWhi)}
              submitsForm={true}
            >
              {"Log in"}
            </Button>
          </div>
        ) : null}
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__zvxZc,
            {
              [sty.linknewsCategory__zvxZc29QK7]: hasVariant(
                $state,
                "newsCategory",
                "newsCategory"
              )
            }
          )}
          component={Link}
          href={"https://www.plasmic.app/"}
          platform={"nextjs"}
        >
          {"Some link text"}
        </PlasmicLink__>
      </Stack__>
      <Button
        className={classNames("__wab_instance", sty.button__hsX8R, {
          [sty.buttoncolors_dark__hsX8RBpTZg]: hasVariant(
            $state,
            "colors",
            "dark"
          ),
          [sty.buttonnewsCategory__hsX8R29QK7]: hasVariant(
            $state,
            "newsCategory",
            "newsCategory"
          )
        })}
        color2={hasVariant($state, "colors", "dark") ? "white" : "darkGray"}
        submitsForm={true}
      >
        {"Sign up"}
      </Button>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "cmsDataFetcher", "cmsEntryField"],
  logo: ["logo"],
  cmsDataFetcher: ["cmsDataFetcher", "cmsEntryField"],
  cmsEntryField: ["cmsEntryField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
  cmsDataFetcher: typeof CmsQueryRepeater;
  cmsEntryField: typeof CmsRowField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
