// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e2Wrjg6Dz94BkfogsCYoEo
// Component: l9zB0gKjLGnY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Logo from "../../Logo"; // plasmic-import: FJeM-IovKNGT/component
import Button from "../../Button"; // plasmic-import: dBCQUhJCSZs2/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import Link2 from "../../Link"; // plasmic-import: rJ4GUCSYNAYd/component

import { useScreenVariants as useScreenVariantseatfCtt4BrEn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eatfCTT4BrEN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: e2Wrjg6Dz94BkfogsCYoEo/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: l9zB0gKjLGnY/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: 563f33iyx-K3/icon
import ArrowRightToArcSolidsvgIcon from "./icons/PlasmicIcon__ArrowRightToArcSolidsvg"; // plasmic-import: elZYR_EjRN7S/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {
  scrolled: "scrolled";
  hamburger: "open";
};
export type PlasmicNavbar__VariantsArgs = {
  scrolled?: SingleBooleanChoiceArg<"scrolled">;
  hamburger?: MultiChoiceArg<"open">;
};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "scrolled",
  "hamburger"
);

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: Flex__<"div">;
  hamburger2?: Flex__<"a"> & Partial<LinkProps>;
  cmsDataFetcher?: Flex__<typeof CmsQueryRepeater>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
};

export interface DefaultNavbarProps {
  scrolled?: SingleBooleanChoiceArg<"scrolled">;
  hamburger?: MultiChoiceArg<"open">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "scrolled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.scrolled
      },
      {
        path: "hamburger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hamburger
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseatfCtt4BrEn()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.roothamburger_open]: hasVariant($state, "hamburger", "open"),
          [sty.rootscrolled]: hasVariant($state, "scrolled", "scrolled")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__lhmtn, {
          [sty.freeBoxhamburger_open__lhmtnPKznc]: hasVariant(
            $state,
            "hamburger",
            "open"
          )
        })}
      >
        <Logo
          className={classNames("__wab_instance", sty.logo__yLpSq, {
            [sty.logohamburger_open__yLpSqPKznc]: hasVariant(
              $state,
              "hamburger",
              "open"
            ),
            [sty.logoscrolled__yLpSqxsAja]: hasVariant(
              $state,
              "scrolled",
              "scrolled"
            )
          })}
          white={
            hasVariant($state, "hamburger", "open")
              ? undefined
              : hasVariant($state, "scrolled", "scrolled")
              ? undefined
              : undefined
          }
        />
      </div>
      <Button
        className={classNames("__wab_instance", sty.button__sxVii, {
          [sty.buttonhamburger_open__sxViiPKznc]: hasVariant(
            $state,
            "hamburger",
            "open"
          )
        })}
        color2={"darkGray"}
        endIcon={
          <ArrowRightToArcSolidsvgIcon
            className={classNames(projectcss.all, sty.svg__v9J62)}
            role={"img"}
          />
        }
        link={""}
        onClick={async event => {
          const $steps = {};

<<<<<<< HEAD
          $steps["goToPage"] = true
            ? (() => {
                const actionArgs = {};
=======
          $steps["goToHttpsappdaplyco"] = true
            ? (() => {
                const actionArgs = { destination: "https://app.daply.co" };
>>>>>>> origin/main
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
<<<<<<< HEAD
            $steps["goToPage"] != null &&
            typeof $steps["goToPage"] === "object" &&
            typeof $steps["goToPage"].then === "function"
          ) {
            $steps["goToPage"] = await $steps["goToPage"];
=======
            $steps["goToHttpsappdaplyco"] != null &&
            typeof $steps["goToHttpsappdaplyco"] === "object" &&
            typeof $steps["goToHttpsappdaplyco"].then === "function"
          ) {
            $steps["goToHttpsappdaplyco"] = await $steps["goToHttpsappdaplyco"];
>>>>>>> origin/main
          }

          $steps["updateStateVariable"] = true
            ? (() => {
                const actionArgs = {};
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;
                  undefined;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStateVariable"] != null &&
            typeof $steps["updateStateVariable"] === "object" &&
            typeof $steps["updateStateVariable"].then === "function"
          ) {
            $steps["updateStateVariable"] = await $steps["updateStateVariable"];
          }
        }}
        showEndIcon={true}
        submitsForm={true}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mVkEg
          )}
        >
          {"Launch  App"}
        </div>
      </Button>
      <PlasmicLink__
        data-plasmic-name={"hamburger2"}
        data-plasmic-override={overrides.hamburger2}
        className={classNames(projectcss.all, projectcss.a, sty.hamburger2)}
        component={Link}
        onClick={async event => {
          const $steps = {};

          $steps["updateHamburger"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "hamburger",
                  operation: 3,
                  value: "open"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  let activeVariants = $stateGet($state, vgroup) ?? [];
                  if (typeof activeVariants === "string") {
                    activeVariants = [activeVariants];
                  }
                  for (const variant of value) {
                    if (activeVariants.includes(variant)) {
                      activeVariants.splice(activeVariants.indexOf(variant), 1);
                    } else {
                      activeVariants.push(variant);
                    }
                  }
                  $stateSet($state, vgroup, activeVariants);
                  return activeVariants;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateHamburger"] != null &&
            typeof $steps["updateHamburger"] === "object" &&
            typeof $steps["updateHamburger"].then === "function"
          ) {
            $steps["updateHamburger"] = await $steps["updateHamburger"];
          }
        }}
        platform={"nextjs"}
      >
        <svg
          className={classNames(projectcss.all, sty.svg__qa3G2)}
          role={"img"}
        />
      </PlasmicLink__>
      {(hasVariant($state, "hamburger", "open") ? true : false) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vrHfQ, {
            [sty.freeBoxhamburger_open__vrHfQpKznc]: hasVariant(
              $state,
              "hamburger",
              "open"
            ),
            [sty.freeBoxscrolled__vrHfQxsAja]: hasVariant(
              $state,
              "scrolled",
              "scrolled"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kqW4U)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__irhcX, {
                [sty.freeBoxhamburger_open__irhcXpKznc]: hasVariant(
                  $state,
                  "hamburger",
                  "open"
                )
              })}
            >
              <Logo className={classNames("__wab_instance", sty.logo__thDvy)} />
            </div>
            <Button className={classNames("__wab_instance", sty.button__qsoau)}>
              {"News"}
            </Button>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <Button
                className={classNames("__wab_instance", sty.button__budlI)}
              >
                {"About Us"}
              </Button>
            ) : null}
            <Button
              className={classNames("__wab_instance", sty.button___0HHiH)}
            >
              {"Label"}
            </Button>
            <CmsQueryRepeater
              data-plasmic-name={"cmsDataFetcher"}
              data-plasmic-override={overrides.cmsDataFetcher}
              className={classNames("__wab_instance", sty.cmsDataFetcher)}
              desc={false}
              emptyMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__st3V0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return undefined;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "No matching published entries found.";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Link2
                        className={classNames(
                          "__wab_instance",
                          sty.link__ngnWm
                        )}
                      />
                    </React.Fragment>
                  )}
                </DataCtxReader__>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0}
              loadingMessage={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c4IFw
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </DataCtxReader__>
              }
              noAutoRepeat={false}
              noLayout={false}
              table={"categories"}
              useDraft={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__x5S37)}
                  >
                    <CmsRowField
                      data-plasmic-name={"cmsEntryField"}
                      data-plasmic-override={overrides.cmsEntryField}
                      className={classNames(
                        "__wab_instance",
                        sty.cmsEntryField
                      )}
                      themeResetClassName={classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                    />

                    <Link2
                      className={classNames("__wab_instance", sty.link__ppX23)}
                    />
                  </Stack__>
                )}
              </DataCtxReader__>
            </CmsQueryRepeater>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hKv3
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Some link text"}
            </PlasmicLink__>
          </Stack__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__tkRcX
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["updateHamburger"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "hamburger",
                      operation: 0,
                      value: "open"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateHamburger"] != null &&
                typeof $steps["updateHamburger"] === "object" &&
                typeof $steps["updateHamburger"].then === "function"
              ) {
                $steps["updateHamburger"] = await $steps["updateHamburger"];
              }
            }}
            platform={"nextjs"}
          >
            <svg
              className={classNames(projectcss.all, sty.svg__lmRv)}
              role={"img"}
            />
          </PlasmicLink__>
        </Stack__>
      ) : null}
      <div
        className={classNames(projectcss.all, sty.freeBox__gyUfp, {
          [sty.freeBoxhamburger_open__gyUfpPKznc]: hasVariant(
            $state,
            "hamburger",
            "open"
          )
        })}
      >
        <Button
          className={classNames("__wab_instance", sty.button__uXkkj, {
            [sty.buttonhamburger_open__uXkkjPKznc]: hasVariant(
              $state,
              "hamburger",
              "open"
            )
          })}
        />

        <Button
          className={classNames("__wab_instance", sty.button__bHe8, {
            [sty.buttonhamburger_open__bHe8PKznc]: hasVariant(
              $state,
              "hamburger",
              "open"
            )
          })}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "hamburger2", "cmsDataFetcher", "cmsEntryField"],
  hamburger2: ["hamburger2"],
  cmsDataFetcher: ["cmsDataFetcher", "cmsEntryField"],
  cmsEntryField: ["cmsEntryField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  hamburger2: "a";
  cmsDataFetcher: typeof CmsQueryRepeater;
  cmsEntryField: typeof CmsRowField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hamburger2: makeNodeComponent("hamburger2"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
