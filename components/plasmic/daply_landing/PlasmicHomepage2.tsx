// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e2Wrjg6Dz94BkfogsCYoEo
// Component: tmPjnsAKrj-H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: dBCQUhJCSZs2/component
import SignUpPrompt from "../../SignUpPrompt"; // plasmic-import: NOJgg_Sy_SDB/component
import Section from "../../Section"; // plasmic-import: Rmg4dgTCPBXZ/component
import ValueProp from "../../ValueProp"; // plasmic-import: b8UA6WVbb5xL/component
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import ListItem from "../../ListItem"; // plasmic-import: 8hUxG6dhf1yo/component
import PriceCard from "../../PriceCard"; // plasmic-import: g3CxlUrNVWAd/component
import Banner from "../../Banner"; // plasmic-import: -2zftpqT-X-k/component
import Testimonial from "../../Testimonial"; // plasmic-import: RF-Yj1fkCKhf/component
import CallToActionSection from "../../CallToActionSection"; // plasmic-import: JbYIy_ldO41D/component
import FooterSection from "../../FooterSection"; // plasmic-import: 7rGOkW3yxftm/component

import { useScreenVariants as useScreenVariantseatfCtt4BrEn } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: eatfCTT4BrEN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: e2Wrjg6Dz94BkfogsCYoEo/projectcss
import sty from "./PlasmicHomepage2.module.css"; // plasmic-import: tmPjnsAKrj-H/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: 563f33iyx-K3/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: HEPvTyIN4GhK/icon
import CheckIcon from "./icons/PlasmicIcon__Check"; // plasmic-import: nEIP81smXuD5/icon
import CheckCircleIcon from "./icons/PlasmicIcon__CheckCircle"; // plasmic-import: PF-uMZ6SyAuZ/icon

createPlasmicElementProxy;

export type PlasmicHomepage2__VariantMembers = {};
export type PlasmicHomepage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage2__VariantsArgs;
export const PlasmicHomepage2__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage2__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage2__ArgsType;
export const PlasmicHomepage2__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage2__OverridesType = {
  root?: Flex__<"div">;
  headerHeroSection?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  signup?: Flex__<typeof Button>;
  signUpPrompt?: Flex__<typeof SignUpPrompt>;
  valuePropsSection?: Flex__<typeof Section>;
  accordion?: Flex__<typeof AntdAccordion>;
  dataFetcher?: Flex__<typeof Fetcher>;
  checkpointsSection?: Flex__<typeof Section>;
  pricingSection?: Flex__<typeof Section>;
  shopBannersSection?: Flex__<typeof Section>;
  logoCloudSection?: Flex__<typeof Section>;
  testimonialsSection?: Flex__<typeof Section>;
  callToActionSection?: Flex__<typeof CallToActionSection>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepage2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage2__RenderFunc(props: {
  variants: PlasmicHomepage2__VariantsArgs;
  args: PlasmicHomepage2__ArgsType;
  overrides: PlasmicHomepage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseatfCtt4BrEn()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage2.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ghiZf)}>
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                brand={
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__z4RAz
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vVOi0)}
                      displayHeight={"40px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: "/plasmic/daply_landing/images/daplyLogoBlackpng.png",
                        fullWidth: 540,
                        fullHeight: 190,
                        aspectRatio: undefined
                      }}
                    />
                  </PlasmicLink__>
                }
                className={classNames("__wab_instance", sty.navigationBar)}
                closeButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yIyRx)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/close.svg"}
                  />
                }
                itemsGap={8}
                menuItems={
                  <React.Fragment>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__apzGf
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"Home"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__f47YM
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"About"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__n0Obs
                      )}
                      component={Link}
                      href={"/"}
                      platform={"nextjs"}
                    >
                      {"Contact"}
                    </PlasmicLink__>
                    <Button
                      data-plasmic-name={"signup"}
                      data-plasmic-override={overrides.signup}
                      className={classNames("__wab_instance", sty.signup)}
                      color2={"blue"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStateVariable"] = true
                          ? (() => {
                              const actionArgs = {};
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStateVariable"] != null &&
                          typeof $steps["updateStateVariable"] === "object" &&
                          typeof $steps["updateStateVariable"].then ===
                            "function"
                        ) {
                          $steps["updateStateVariable"] = await $steps[
                            "updateStateVariable"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a9Iga
                        )}
                      >
                        {"Open App"}
                      </div>
                    </Button>
                  </React.Fragment>
                }
                openButton={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rKRh)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={"https://static1.plasmic.app/menu.svg"}
                  />
                }
                responsiveBreakpoint={768}
              />
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__wMvsI)}
            >
              <div className={classNames(projectcss.all, sty.column__pnr1C)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wmmGo)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1IzNs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lzf7L)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__si33U
                        )}
                      >
                        {"Updated!"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ncUit
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Scale your blog "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ textDecoration: "underline" }}
                        >
                          {"production"}
                        </span>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rMQyw
                      )}
                    >
                      {
                        "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__g7Hnx)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__yvpre
                      )}
                      color2={"darkGray"}
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__eg5Z)}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Tt7R
                        )}
                      >
                        {"Start now"}
                      </div>
                    </Button>
                    <Button
                      bgDifference={true}
                      className={classNames(
                        "__wab_instance",
                        sty.button__czNmI
                      )}
                      color2={"darkGray"}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wShdv
                        )}
                      >
                        {"Learn more\u2026"}
                      </div>
                    </Button>
                  </Stack__>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__lo8F)}>
                <SignUpPrompt
                  data-plasmic-name={"signUpPrompt"}
                  data-plasmic-override={overrides.signUpPrompt}
                  className={classNames("__wab_instance", sty.signUpPrompt)}
                />
              </div>
            </Stack__>
          </Stack__>
          <Section
            data-plasmic-name={"valuePropsSection"}
            data-plasmic-override={overrides.valuePropsSection}
            className={classNames("__wab_instance", sty.valuePropsSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nJoDk)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__eyQl)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rx7SY
                  )}
                >
                  {"Proposing values"}
                </h2>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xrZcE
                )}
              >
                {
                  "Consectetur a adipiscing sagittis sed proin libero himenaeos ornare adipiscing suscipit leo vestibulum facilisi consequat nisi nisi adipiscing habitant facilisis suspendisse hac integer eget quam facilisis sem placerat fames."
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yQGy1)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hStTm)}
              >
                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__hsNuk)}
                  description={
                    "Nulla odio mauris enim parturient adipiscing vestibulum inceptos."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__sIsuG)}
                      role={"img"}
                    />
                  }
                  title={"Powerful"}
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__ePxjh)}
                  description={
                    "Consequat scelerisque a eros taciti nisl a sodales."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__sOt6E)}
                      role={"img"}
                    />
                  }
                  title={"Faster"}
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__euzXn)}
                  description={"At ut condimentum amet adipiscing ac diam a."}
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__e6TtF)}
                      role={"img"}
                    />
                  }
                  title={"kjjj"}
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__wSSC)}
                  description={
                    "Donec purus nec vestibulum volutpat vivamus vulputate suspendisse."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__eWpMh)}
                      role={"img"}
                    />
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jnAv1
                      )}
                    >
                      {"Dynamic range"}
                    </div>
                  }
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vchrh)}
              >
                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__qvUG)}
                  description={
                    "Commodo pretium himenaeos nisi potenti ad in ante."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__gWl3R)}
                      role={"img"}
                    />
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pIh57
                      )}
                    >
                      {"Portable"}
                    </div>
                  }
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp___1MKk)}
                  description={
                    "Magna ullamcorper ut arcu nisi a per facilisis."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg___1MfHg)}
                      role={"img"}
                    />
                  }
                  title={"Production-ready"}
                />

                <ValueProp
                  className={classNames(
                    "__wab_instance",
                    sty.valueProp___6Oeat
                  )}
                  description={
                    "Ac lobortis praesent sagittis dictumst fermentum vestibulum nunc."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__jgZbu)}
                      role={"img"}
                    />
                  }
                  title={"Magical"}
                />

                <ValueProp
                  className={classNames(
                    "__wab_instance",
                    sty.valueProp___75CgR
                  )}
                  description={
                    "A parturient mi suspendisse nisl inceptos nullam a."
                  }
                  flatIcon={true}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__c57Dl)}
                      role={"img"}
                    />
                  }
                  title={"Accessible"}
                />
              </Stack__>
            </Stack__>
            {(() => {
              const child$Props = {
                activeKey: generateStateValueProp($state, [
                  "accordion",
                  "activePanelId"
                ]),
                bordered: true,
                className: classNames("__wab_instance", sty.accordion),
                items: (
                  <React.Fragment>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem___7NmNu
                      )}
                      id={1}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ySeNk
                          )}
                        >
                          {"First Item"}
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iRyIj
                        )}
                      >
                        {"First Children"}
                      </div>
                    </AntdAccordionItem>
                    <AntdAccordionItem
                      className={classNames(
                        "__wab_instance",
                        sty.accordionItem__mkb2I
                      )}
                      id={2}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w4F4T
                          )}
                        >
                          {"Second Item"}
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wuqHj
                        )}
                      >
                        {"Second Children"}
                      </div>
                    </AntdAccordionItem>
                  </React.Fragment>
                ),
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "activePanelId",
                  ["accordion", "activePanelId"],
                  AntdAccordion_Helpers
                )
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "activePanelId",
                    plasmicStateName: "accordion.activePanelId"
                  }
                ],
                [],
                AntdAccordion_Helpers ?? {},
                child$Props
              );

              return (
                <AntdAccordion
                  data-plasmic-name={"accordion"}
                  data-plasmic-override={overrides.accordion}
                  {...child$Props}
                />
              );
            })()}
            <Fetcher
              data-plasmic-name={"dataFetcher"}
              data-plasmic-override={overrides.dataFetcher}
              className={classNames("__wab_instance", sty.dataFetcher)}
              queries={{}}
            />
          </Section>
          <Section
            data-plasmic-name={"checkpointsSection"}
            data-plasmic-override={overrides.checkpointsSection}
            background={"dark"}
            className={classNames("__wab_instance", sty.checkpointsSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__y5DSa)}
              id={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "features"
                  : "features"
              }
            >
              <div className={classNames(projectcss.all, sty.column__zKyX)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nhTpF)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4JUoA
                    )}
                  >
                    {"Freedoms"}
                  </div>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__qgfXe
                    )}
                  >
                    {"Open by design"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xTcpL
                    )}
                  >
                    {
                      "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__kGjB)}
                    endIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__qgdNj)}
                        role={"img"}
                      />
                    }
                    flat={true}
                    showEndIcon={true}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sJiIi
                      )}
                    >
                      {"Learn more"}
                    </div>
                  </Button>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__buhF3)}>
                <div className={classNames(projectcss.all, sty.freeBox__aqKy)}>
                  <ListItem
                    bottomBorder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "dark"
                        : "dark"
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__mk8V1
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg___9Pjvf)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gIx4D
                      )}
                    >
                      {"Built on capability"}
                    </div>
                  </ListItem>
                  <ListItem
                    bottomBorder={"dark"}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem___7OIo
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__fTCc8)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cJAf0
                      )}
                    >
                      {"Highly energetic"}
                    </div>
                  </ListItem>
                  <ListItem
                    bottomBorder={"dark"}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__o2B4O
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__zVa2Z)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g3Ih
                      )}
                    >
                      {"100% transparency and accountability"}
                    </div>
                  </ListItem>
                  <ListItem
                    bottomBorder={"dark"}
                    className={classNames(
                      "__wab_instance",
                      sty.listItem__ly9Sw
                    )}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__x953H)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0MbdB
                      )}
                    >
                      {"Refreshing clarity"}
                    </div>
                  </ListItem>
                  <ListItem
                    className={classNames("__wab_instance", sty.listItem__tOV)}
                    icon={
                      <CheckCircleIcon
                        className={classNames(projectcss.all, sty.svg__zQd7W)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pBkPp
                      )}
                    >
                      {"Modern results"}
                    </div>
                  </ListItem>
                </div>
              </div>
            </Stack__>
          </Section>
          <Section
            data-plasmic-name={"pricingSection"}
            data-plasmic-override={overrides.pricingSection}
            background={"dark"}
            className={classNames("__wab_instance", sty.pricingSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p6Xwn)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qujL)}
              >
                <div className={classNames(projectcss.all, sty.freeBox___3LPk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p9FX8
                    )}
                  >
                    {"Pricing plans"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___99MB0
                  )}
                >
                  {
                    "Nascetur nascetur ridiculus scelerisque adipiscing a nascetur varius sed eu a ad semper a est nec litora ante at orci rhoncus a varius auctor aliquam inceptos vestibulum ridiculus."
                  }
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__hi8Tw)}
              >
                <div className={classNames(projectcss.all, sty.column__vZq3L)}>
                  <PriceCard
                    borders={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? []
                        : ["flatRight"]
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__yyx9X
                    )}
                    description={
                      <React.Fragment>
                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__wgzh
                          )}
                          description={
                            "Vestibulum mollis odio dictum ultrices facilisis molestie vestibulum"
                          }
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tlS
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />

                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__afj6T
                          )}
                          description={"Mus consequat a justo"}
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__d4Xjs
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />
                      </React.Fragment>
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column___3Tx6C)}>
                  <PriceCard
                    action={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ag16H
                        )}
                      >
                        {"Buy pro"}
                      </div>
                    }
                    borders={[]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__dgohs
                    )}
                    description={
                      <React.Fragment>
                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__zDzjy
                          )}
                          description={
                            "Ligula primis mollis sem dignissim semper lectus parturient"
                          }
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ryWjv
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />

                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__hTs8B
                          )}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0UiL8
                              )}
                            >
                              {"A curabitur dignissim pharetra porta suscipit"}
                            </div>
                          }
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hlnth
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />

                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp___3JJoU
                          )}
                          description={
                            "Condimentum diam a et sapien praesent potenti torquent a eros"
                          }
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__m9XfC
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />

                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__b4Ps
                          )}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__z0SGq
                              )}
                            >
                              {"Conubia in hac eu elementum sodales"}
                            </div>
                          }
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__m7J3
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />
                      </React.Fragment>
                    }
                    dollars={"16"}
                    label={"PRO"}
                    primary={true}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__lSzGj)}>
                  <PriceCard
                    action={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wtSaC
                        )}
                      >
                        {"Buy team"}
                      </div>
                    }
                    borders={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? []
                        : ["flatLeft"]
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__tLtKb
                    )}
                    description={
                      <React.Fragment>
                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__efPDi
                          )}
                          description={"Ad nam curae a potenti platea"}
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___6BfG4
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />

                        <ValueProp
                          className={classNames(
                            "__wab_instance",
                            sty.valueProp__q6LNs
                          )}
                          description={
                            "A adipiscing scelerisque pretium consectetur sem"
                          }
                          flatIcon={true}
                          icon={
                            <CheckIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zgHnz
                              )}
                              role={"img"}
                            />
                          }
                          noTitle={true}
                        />
                      </React.Fragment>
                    }
                    dollars={"10"}
                    label={"Team"}
                  />
                </div>
              </Stack__>
            </Stack__>
          </Section>
          <Section
            data-plasmic-name={"shopBannersSection"}
            data-plasmic-override={overrides.shopBannersSection}
            className={classNames("__wab_instance", sty.shopBannersSection)}
            size={"fullContentWidth"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ob1ST)}
            >
              <Banner
                className={classNames("__wab_instance", sty.banner__k6Nub)}
                image={{
                  src: "/plasmic/daply_landing/images/sunglassesMale.jpg",
                  fullWidth: 2851,
                  fullHeight: 1900,
                  aspectRatio: undefined
                }}
                left={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uydmN
                      )}
                    >
                      {"Sunglasses Collection"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wp4Zl
                      )}
                    >
                      {"Get 25% off on selected items"}
                    </div>
                    <Button
                      color2={"link"}
                      endIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__gBIw)}
                          role={"img"}
                        />
                      }
                      flat={true}
                      showEndIcon={true}
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mwvWm
                        )}
                      >
                        {"Go to collection"}
                      </div>
                    </Button>
                  </React.Fragment>
                }
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yeZsp)}
              >
                <Banner
                  className={classNames("__wab_instance", sty.banner__ujgyy)}
                  image={{
                    src: "/plasmic/daply_landing/images/sneakers.jpg",
                    fullWidth: 2850,
                    fullHeight: 1900,
                    aspectRatio: undefined
                  }}
                  left={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3VBs
                        )}
                      >
                        {"Sneakers\nCollection"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9YpQk
                        )}
                      >
                        {"Get 25% off on selected items"}
                      </div>
                      <Button
                        color2={"link"}
                        endIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__amwcl
                            )}
                            role={"img"}
                          />
                        }
                        flat={true}
                        showEndIcon={true}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j4Q9Q
                          )}
                        >
                          {"Go to collection"}
                        </div>
                      </Button>
                    </React.Fragment>
                  }
                />

                <Banner
                  className={classNames("__wab_instance", sty.banner__zkPgu)}
                  image={{
                    src: "/plasmic/daply_landing/images/shirtWoman.png",
                    fullWidth: 1834,
                    fullHeight: 2751,
                    aspectRatio: undefined
                  }}
                  left={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__md1Me
                        )}
                      >
                        {"Shirts\nCollection"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lEzXz
                        )}
                      >
                        {"Get 25% off on selected items"}
                      </div>
                      <Button
                        color2={"link"}
                        endIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dC4T
                            )}
                            role={"img"}
                          />
                        }
                        flat={true}
                        showEndIcon={true}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lXyRc
                          )}
                        >
                          {"Go to collection"}
                        </div>
                      </Button>
                    </React.Fragment>
                  }
                />
              </Stack__>
            </Stack__>
          </Section>
          <Section
            data-plasmic-name={"logoCloudSection"}
            data-plasmic-override={overrides.logoCloudSection}
            className={classNames("__wab_instance", sty.logoCloudSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8XoQ)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___4CLEc)}
                displayHeight={"48px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/daply_landing/images/loom.svg",
                  fullWidth: 300,
                  fullHeight: 91,
                  aspectRatio: 3.303226
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bzOx)}
                displayHeight={"48px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/daply_landing/images/strapi.svg",
                  fullWidth: 300,
                  fullHeight: 78,
                  aspectRatio: 3.849624
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mRucS)}
                displayHeight={"48px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/daply_landing/images/segment.svg",
                  fullWidth: 300,
                  fullHeight: 62,
                  aspectRatio: 4.87619
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__uVSzm)}
                displayHeight={"48px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/daply_landing/images/xstate.svg",
                  fullWidth: 300,
                  fullHeight: 94,
                  aspectRatio: 3.2
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___2Dg54)}
                displayHeight={"48px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/daply_landing/images/mapbox.svg",
                  fullWidth: 300,
                  fullHeight: 67,
                  aspectRatio: 4.491228
                }}
              />
            </Stack__>
          </Section>
          <Section
            data-plasmic-name={"testimonialsSection"}
            data-plasmic-override={overrides.testimonialsSection}
            background={"gray"}
            className={classNames("__wab_instance", sty.testimonialsSection)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__bskj9)}
            >
              <div className={classNames(projectcss.all, sty.column__teF94)}>
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__pBn56
                  )}
                  image={{
                    src: "/plasmic/daply_landing/images/tracy.png",
                    fullWidth: 500,
                    fullHeight: 500,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__jrn2M)}>
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__g1Vs8
                  )}
                  image={{
                    src: "/plasmic/daply_landing/images/elaine.png",
                    fullWidth: 460,
                    fullHeight: 280,
                    aspectRatio: undefined
                  }}
                  name={"Elaine Benes"}
                  quote={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u7NK1
                        )}
                      >
                        {'"Vestibulum lacinia varius habitant dis aenean.'}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hqOmp
                        )}
                      >
                        {
                          'A parturient non ultricies a parturient leo a nascetur at consectetur turpis praesent mus ornare nulla posuere vel parturient."'
                        }
                      </div>
                    </React.Fragment>
                  }
                  title={"Editor, Pendant Publishing"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__teUpq)}>
                <Testimonial
                  className={classNames(
                    "__wab_instance",
                    sty.testimonial__hnpP9
                  )}
                  image={{
                    src: "/plasmic/daply_landing/images/louis.jpg",
                    fullWidth: 2249,
                    fullHeight: 3000,
                    aspectRatio: undefined
                  }}
                  name={"Louis Huang"}
                  quote={
                    '"Purus dis a primis rhoncus blandit velit suspendisse porta at ullamcorper suscipit a scelerisque sed pharetra facilisi vitae."'
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b8X4V
                      )}
                    >
                      {"Restaurant Owner, Cattleman's Ranch"}
                    </div>
                  }
                />
              </div>
            </Stack__>
          </Section>
          <CallToActionSection
            data-plasmic-name={"callToActionSection"}
            data-plasmic-override={overrides.callToActionSection}
            className={classNames("__wab_instance", sty.callToActionSection)}
            image={{
              src: "/plasmic/daply_landing/images/meeting.jpg",
              fullWidth: 2916,
              fullHeight: 1787,
              aspectRatio: undefined
            }}
          />

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />

          <ValueProp
            className={classNames("__wab_instance", sty.valueProp__xlsWd)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navigationBar",
    "signup",
    "signUpPrompt",
    "valuePropsSection",
    "accordion",
    "dataFetcher",
    "checkpointsSection",
    "pricingSection",
    "shopBannersSection",
    "logoCloudSection",
    "testimonialsSection",
    "callToActionSection",
    "footerSection"
  ],
  headerHeroSection: [
    "headerHeroSection",
    "navigationBar",
    "signup",
    "signUpPrompt"
  ],
  navigationBar: ["navigationBar", "signup"],
  signup: ["signup"],
  signUpPrompt: ["signUpPrompt"],
  valuePropsSection: ["valuePropsSection", "accordion", "dataFetcher"],
  accordion: ["accordion"],
  dataFetcher: ["dataFetcher"],
  checkpointsSection: ["checkpointsSection"],
  pricingSection: ["pricingSection"],
  shopBannersSection: ["shopBannersSection"],
  logoCloudSection: ["logoCloudSection"],
  testimonialsSection: ["testimonialsSection"],
  callToActionSection: ["callToActionSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navigationBar: typeof NavigationBar;
  signup: typeof Button;
  signUpPrompt: typeof SignUpPrompt;
  valuePropsSection: typeof Section;
  accordion: typeof AntdAccordion;
  dataFetcher: typeof Fetcher;
  checkpointsSection: typeof Section;
  pricingSection: typeof Section;
  shopBannersSection: typeof Section;
  logoCloudSection: typeof Section;
  testimonialsSection: typeof Section;
  callToActionSection: typeof CallToActionSection;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage2__VariantsArgs;
    args?: PlasmicHomepage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage2__ArgProps,
          internalVariantPropNames: PlasmicHomepage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage2";
  } else {
    func.displayName = `PlasmicHomepage2.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage2 = Object.assign(
  // Top-level PlasmicHomepage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navigationBar: makeNodeComponent("navigationBar"),
    signup: makeNodeComponent("signup"),
    signUpPrompt: makeNodeComponent("signUpPrompt"),
    valuePropsSection: makeNodeComponent("valuePropsSection"),
    accordion: makeNodeComponent("accordion"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    checkpointsSection: makeNodeComponent("checkpointsSection"),
    pricingSection: makeNodeComponent("pricingSection"),
    shopBannersSection: makeNodeComponent("shopBannersSection"),
    logoCloudSection: makeNodeComponent("logoCloudSection"),
    testimonialsSection: makeNodeComponent("testimonialsSection"),
    callToActionSection: makeNodeComponent("callToActionSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage2
    internalVariantProps: PlasmicHomepage2__VariantProps,
    internalArgProps: PlasmicHomepage2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage2;
/* prettier-ignore-end */
